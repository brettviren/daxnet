/*  =========================================================================
    daxid - A DAX identity is used to allow the DAX network to know if its participants.

An identity is composed of the following elements:

- a UUID (truly unique)

- a nick name (optional, should be unique, human readable)

- a set of "node endpoints" which are key-value pairs.

More details are in the method documentation.

An application should create a daxid, set various attributes
based on the application's nodes (nodes are abstract roles combined
with their defining configuration) and then start the identity.
Subsequently, the application may call daxid methods to learn
about the state of other identifies on the network.

    LGPL3, boilerplate to come.
    =========================================================================
*/

#ifndef DAXID_H_INCLUDED
#define DAXID_H_INCLUDED

#ifdef __cplusplus
extern "C" {
#endif

//  @warning THE FOLLOWING @INTERFACE BLOCK IS AUTO-GENERATED BY ZPROJECT
//  @warning Please edit the model at "api/daxid.xml" to make changes.
//  @interface
//  This API is a draft, and may change without notice.
#ifdef DAX_BUILD_DRAFT_API
//  *** Draft method, for development use, may change without warning ***
//  Create a DAX identity.
DAX_EXPORT daxid_t *
    daxid_new (void);

//  *** Draft method, for development use, may change without warning ***
//  Destroy the DAX identity.  This will cause the network to learn of
//  the loss of this identity.
DAX_EXPORT void
    daxid_destroy (daxid_t **self_p);

//  *** Draft method, for development use, may change without warning ***
//  A nickname is a human readable name for this identity.  If set, it
//  should be made unique on the network (for the sake of humans, the
//  software won't care).  If it is not set then the starting
//  characters of the UUID will be used.
DAX_EXPORT void
    daxid_set_nickname (daxid_t *self, const char *nickname);

//  *** Draft method, for development use, may change without warning ***
//  Set a node endpoint for this identity.  A node endpoint is the
//  ZeroMQ address string of a socket on which the application has
//  already called "bind()" or will do so before calling "start()".
//  It is identified by the name of the role and the node (ie, node is
//  the configured role and part of that configuration includes a name
//  to distinguish it from potentially other nodes of the same role
//  provided by the application).  Not visible to the application but
//  this will result in a Zyre header with key
//  "DAX-[role-name]-[node-name]".
DAX_EXPORT void
    daxid_set_endpoint (daxid_t *self, const char *rolename, const char *nodename, const char *endpoint);

//  *** Draft method, for development use, may change without warning ***
//  Emit diagnostic messages during operation.
DAX_EXPORT void
    daxid_set_verbose (daxid_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Return our node nickname. Caller must free returned string using
//  zstr_free ().
DAX_EXPORT const char *
    daxid_nickname (daxid_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Return zlist of IDs of active peers.
//  Caller owns return value and must destroy it when done.
//  Caller owns return value and must destroy it when done.
DAX_EXPORT zlist_t *
    daxid_peers (daxid_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Return information about the peer.   Return NULL if uknown.
//  Caller owns return value.
//  Caller owns return value and must destroy it when done.
DAX_EXPORT zhash_t *
    daxid_peer (daxid_t *self, const char *ident);

//  *** Draft method, for development use, may change without warning ***
//  Start node.  This will announce the identity on the network and
//  afterwards no changes to nickname nor node endpoints will be
//  propagated.  Returns 0 if OK, -1 if it wasn't possible to start
//  the node.
DAX_EXPORT int
    daxid_start (daxid_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Self test of this class
DAX_EXPORT void
    daxid_test (bool verbose);

#endif // DAX_BUILD_DRAFT_API
//  @end

#ifdef __cplusplus
}
#endif

#endif
