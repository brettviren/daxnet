<class name="dax_timeline">

  A DAX timeline holds the state of multiple epoch declarations.

  <include filename = "../license.xml"/>


  <constructor>
    Create a DAX identity.
    <!-- 
    <argument name = "tbeg" c_type = "int64_t">Requested start of timeline</argument>
    -->
  </constructor>

  <destructor>
    Destroy the DAX identity.  This will cause the network to learn of
    the loss of this identity.
  </destructor>

  <method name = "current epoch">
    Return the current epoch as determiend by the given time.

    A subsequent epoch declaration may cause this method to not be idempotent.
    <argument name = "tnow" c_type = "int64_t">Current time</argument>
    <argument type = "dax_epoch" />
  </method>

  <method name = "next epoch">
    Return the next epoch as determiend by the given time.

    A subsequent epoch declaration may cause this method to not be idempotent.
    <argument name = "tnow" c_type = "int64_t">Current time</argument>
    <return type = "dax_epoch" />
  </method>

  <method name = "feed">
    Return a socket from which received epoch declaration and
    termination messages will be forwarded to the application.

    If called, application must read to avoid hitting mute state.
    <return type = "zsock"/>
  </method>

</class>
       
