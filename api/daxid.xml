<class name = "daxid">
  A DAX identity is used to allow the DAX network to know if its participants.

  An identity is composed of the following elements:

  - a UUID (truly unique)

  - a nick name (optional, should be unique, human readable)

  - a set of "node endpoints" which are key-value pairs.

  More details are in the method documentation.

  An application should create a daxid, set various attributes
  based on the application's nodes (nodes are abstract roles combined
  with their defining configuration) and then start the identity.
  Subsequently, the application may call daxid methods to learn
  about the state of other identifies on the network.

  <constructor>
    Create a DAX identity.
  </constructor>

  <destructor>
    Destroy the DAX identity.  This will cause the network to learn of
    the loss of this identity.
  </destructor>

  <!-- setters -->

  <method name = "set nickname">
    A nickname is a human readable name for this identity.  If set, it
    should be made unique on the network (for the sake of humans, the
    software won't care).  If it is not set then the starting
    characters of the UUID will be used.
    <argument name = "nickname" type = "string"/>
  </method>

  <method name = "set endpoint">
    Set a node endpoint for this identity.  A node endpoint is the
    ZeroMQ address string of a socket on which the application has
    already called "bind()" or will do so before calling "start()".
    It is identified by the name of the role and the node (ie, node is
    the configured role and part of that configuration includes a name
    to distinguish it from potentially other nodes of the same role
    provided by the application).  Not visible to the application but
    this will result in a Zyre header with key 
    "DAX-[role-name]-[node-name]".
    <argument name = "rolename" type = "string"/>
    <argument name = "nodename" type = "string"/>
    <argument name = "endpoint" type = "string"/>
  </method>

  <method name = "set verbose">
    Emit diagnostic messages during operation.
  </method>

  <method name = "nickname">
    Return our node nickname. Caller must free returned string using
    zstr_free ().
    <return type = "string"/>
  </method>
  
  <method name = "peers">
    Return zlist of IDs of active peers.
    <return type = "zlist" fresh="1" />
  </method>

  <method name = "peer">
    Return information about the peer.   Return NULL if unknown.
    <argument name = "ident" type = "string" />
    <return type = "zhash" fresh="1" />
  </method>
    
  <method name = "start">
    Start node.  This will announce the identity on the network and
    afterwards no changes to nickname nor node endpoints will be
    propagated.  Returns 0 if OK, -1 if it wasn't possible to start
    the node.
    <return type = "integer" />
  </method>

  <method name = "test" singleton = "1">
    Self test of this class
    <argument name = "verbose" type = "boolean" />
  </method>


</class>
